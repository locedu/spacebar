// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// models

enum UserStatus {
  ACTIVE
  BLOCKED
  INACTIVE
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model User {
  id             String    @id @default(uuid()) // UUID as the primary key
  username       String    @unique
  email          String    @unique
  password       String    // Required for authentication
  name           String    @default("Anonymous") // Default value "Anonymous"
  status         UserStatus @default(ACTIVE) // System status (e.g., "active", "blocked")
  statusMessage  String?   // Optional field for a one-liner user status (e.g., "Feeling good today")
  profileImage   String?   // Optional field for profile image URL
  bio            String?   // Optional field for user bio (description)

  role           UserRole @default(USER) // User role (e.g., USER, ADMIN)

  createdAt      DateTime  @default(now()) // Automatically set when the account is created
  updatedAt      DateTime  @updatedAt // Automatically updated when the user record is updated
  lastLogin      DateTime? // Nullable field for tracking last login time

  posts          Post[]    // Posts created by the user
  comments       Comment[] // Comments made by the user
  likes          Like[]    // Posts liked by the user
  friends        UserFriends[] @relation("UserFriendsUser") // User's friend relationships (self-referencing through UserFriends)
  friendsOf      UserFriends[] @relation("UserFriendsFriend") // Reverse relation for friends (friend side)
}

model Post {
  id        String    @id @default(uuid()) // UUID as the primary key
  title     String    // Title of the post
  content   String    // Content of the post
  createdAt DateTime  @default(now()) // Automatically set when the post is created
  updatedAt DateTime  @updatedAt // Automatically updated when the post is modified
  userId    String    // Reference to the user who created the post (UUID)

  // CASCADE delete on the related entity (User -> Post)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[] // Comments associated with the post
  likes     Like[]    // Likes on the post
}

model Comment {
  id        String    @id @default(uuid()) // UUID as the primary key
  content   String    // Content of the comment
  createdAt DateTime  @default(now()) // Automatically set when the comment is created
  updatedAt DateTime  @updatedAt // Automatically updated when the comment is modified
  userId    String    // Reference to the user who created the comment (UUID)
  postId    String    // Reference to the post the comment belongs to (UUID)

  // CASCADE delete on the related entity (User -> Comment) and (Post -> Comment)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id        String    @id @default(uuid()) // UUID as the primary key
  createdAt DateTime  @default(now()) // Timestamp when the like is created
  userId    String    // Reference to the user who liked the post (UUID)
  postId    String    // Reference to the post that was liked (UUID)

  // CASCADE delete on the related entity (User -> Like) and (Post -> Like)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Ensure a user can only like a post once
}

model UserFriends {
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  // Index both userId and friendId for faster lookup
  @@index([userId])
  @@index([friendId])

  // Ensure that each user can only be friends with another user once
  @@unique([userId, friendId])

  // Relationship to the User model (user and friend have different relation names)
  user     User    @relation("UserFriendsUser", fields: [userId], references: [id], onDelete: Cascade)
  friend   User    @relation("UserFriendsFriend", fields: [friendId], references: [id], onDelete: Cascade)
}
